[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "BASE_PATH",
        "kind": 5,
        "importPath": ".vscode.font_fix",
        "description": ".vscode.font_fix",
        "peekOfCode": "BASE_PATH = os.environ.get(\"GITPOD_REPO_ROOT\")\nwith open(f\"{BASE_PATH}/.vscode/settings.json\", \"r+\") as f:\n    content = json.loads(f.read())\n    if \"terminal.integrated.fontFamily\" not in content:\n        print(\"Adding wider and higher font settings\")\n        content[\"terminal.integrated.lineHeight\"] = 1.2\n        content[\"terminal.integrated.letterSpacing\"] = 2\n    else:\n        print(\"Wider and higher font settings already added!\")\n    f.seek(0, os.SEEK_SET)",
        "detail": ".vscode.font_fix",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def main():\n    \"\"\"\n    The main function of the program. Handles user interaction.\n    \"\"\"\nif __name__ == \"__main__\":\n    main()",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "tasks = []\n# Initialize task ID based on the current length of tasks\nTASK_ID = 0\n# Define a separator for visual clarity in the log file\nseparator = \"-\" * 200\n# Define the filename for storing task logs\nfile_name = \"tasks_log.txt\"\nLOG_FILE_NAME = os.getenv(\"TASKS_LOG_PATH\", \"tasks_log.txt\")\n# Check if the LOG_FILE_NAME is an absolute path, if not, use the desktop path\nif os.path.isabs(LOG_FILE_NAME):",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "TASK_ID",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "TASK_ID = 0\n# Define a separator for visual clarity in the log file\nseparator = \"-\" * 200\n# Define the filename for storing task logs\nfile_name = \"tasks_log.txt\"\nLOG_FILE_NAME = os.getenv(\"TASKS_LOG_PATH\", \"tasks_log.txt\")\n# Check if the LOG_FILE_NAME is an absolute path, if not, use the desktop path\nif os.path.isabs(LOG_FILE_NAME):\n    full_path = LOG_FILE_NAME\nelse:",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "separator",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "separator = \"-\" * 200\n# Define the filename for storing task logs\nfile_name = \"tasks_log.txt\"\nLOG_FILE_NAME = os.getenv(\"TASKS_LOG_PATH\", \"tasks_log.txt\")\n# Check if the LOG_FILE_NAME is an absolute path, if not, use the desktop path\nif os.path.isabs(LOG_FILE_NAME):\n    full_path = LOG_FILE_NAME\nelse:\n    # If running locally, store the tasks log on the desktop for easy access\n    desktop_path = Path.home() / \"Desktop\"",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "file_name",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "file_name = \"tasks_log.txt\"\nLOG_FILE_NAME = os.getenv(\"TASKS_LOG_PATH\", \"tasks_log.txt\")\n# Check if the LOG_FILE_NAME is an absolute path, if not, use the desktop path\nif os.path.isabs(LOG_FILE_NAME):\n    full_path = LOG_FILE_NAME\nelse:\n    # If running locally, store the tasks log on the desktop for easy access\n    desktop_path = Path.home() / \"Desktop\"\n    full_path = desktop_path / file_name\ndef main():",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "LOG_FILE_NAME",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "LOG_FILE_NAME = os.getenv(\"TASKS_LOG_PATH\", \"tasks_log.txt\")\n# Check if the LOG_FILE_NAME is an absolute path, if not, use the desktop path\nif os.path.isabs(LOG_FILE_NAME):\n    full_path = LOG_FILE_NAME\nelse:\n    # If running locally, store the tasks log on the desktop for easy access\n    desktop_path = Path.home() / \"Desktop\"\n    full_path = desktop_path / file_name\ndef main():\n    \"\"\"",
        "detail": "run",
        "documentation": {}
    }
]